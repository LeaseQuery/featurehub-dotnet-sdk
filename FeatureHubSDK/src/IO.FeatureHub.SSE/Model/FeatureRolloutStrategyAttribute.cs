/*
 * FeatureServiceApi
 *
 * This describes the API clients use for accessing features
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = IO.FeatureHub.SSE.Client.OpenAPIDateConverter;

namespace IO.FeatureHub.SSE.Model
{
    /// <summary>
    /// FeatureRolloutStrategyAttribute
    /// </summary>
    [DataContract(Name = "FeatureRolloutStrategyAttribute")]
    public partial class FeatureRolloutStrategyAttribute : IEquatable<FeatureRolloutStrategyAttribute>
    {

        /// <summary>
        /// Gets or Sets Conditional
        /// </summary>
        [DataMember(Name = "conditional", IsRequired = true, EmitDefaultValue = false)]
        public RolloutStrategyAttributeConditional Conditional { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public RolloutStrategyFieldType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureRolloutStrategyAttribute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeatureRolloutStrategyAttribute() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureRolloutStrategyAttribute" /> class.
        /// </summary>
        /// <param name="conditional">conditional (required).</param>
        /// <param name="fieldName">fieldName (required).</param>
        /// <param name="values">the value(s) associated with this rule.</param>
        /// <param name="type">type (required).</param>
        public FeatureRolloutStrategyAttribute(RolloutStrategyAttributeConditional conditional = default(RolloutStrategyAttributeConditional), string fieldName = default(string), List<Object> values = default(List<Object>), RolloutStrategyFieldType type = default(RolloutStrategyFieldType))
        {
            this.Conditional = conditional;
            // to ensure "fieldName" is required (not null)
            if (fieldName == null)
            {
                throw new ArgumentNullException("fieldName is a required property for FeatureRolloutStrategyAttribute and cannot be null");
            }
            this.FieldName = fieldName;
            this.Type = type;
            this.Values = values;
        }

        /// <summary>
        /// Gets or Sets FieldName
        /// </summary>
        [DataMember(Name = "fieldName", IsRequired = true, EmitDefaultValue = false)]
        public string FieldName { get; set; }

        /// <summary>
        /// the value(s) associated with this rule
        /// </summary>
        /// <value>the value(s) associated with this rule</value>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        public List<Object> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeatureRolloutStrategyAttribute {\n");
            sb.Append("  Conditional: ").Append(Conditional).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeatureRolloutStrategyAttribute);
        }

        /// <summary>
        /// Returns true if FeatureRolloutStrategyAttribute instances are equal
        /// </summary>
        /// <param name="input">Instance of FeatureRolloutStrategyAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureRolloutStrategyAttribute input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Conditional == input.Conditional ||
                    this.Conditional.Equals(input.Conditional)
                ) && 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Conditional.GetHashCode();
                if (this.FieldName != null)
                {
                    hashCode = (hashCode * 59) + this.FieldName.GetHashCode();
                }
                if (this.Values != null)
                {
                    hashCode = (hashCode * 59) + this.Values.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

    }

}
