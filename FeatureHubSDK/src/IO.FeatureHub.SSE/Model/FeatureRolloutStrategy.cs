/*
 * FeatureServiceApi
 *
 * This describes the API clients use for accessing features
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = IO.FeatureHub.SSE.Client.OpenAPIDateConverter;

namespace IO.FeatureHub.SSE.Model
{
    /// <summary>
    /// This is the model for the rollout strategy as required by Dacha and Edge
    /// </summary>
    [DataContract(Name = "FeatureRolloutStrategy")]
    public partial class FeatureRolloutStrategy : IEquatable<FeatureRolloutStrategy>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureRolloutStrategy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeatureRolloutStrategy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureRolloutStrategy" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="percentage">value between 0 and 1000000 - for four decimal places.</param>
        /// <param name="percentageAttributes">if you don&#39;t wish to apply percentage based on user id, you can use one or more attributes defined here.</param>
        /// <param name="value">when we attach the RolloutStrategy for Dacha or SSE this lets us push the value out. Only visible in SDK and SSE Edge..</param>
        /// <param name="attributes">attributes.</param>
        public FeatureRolloutStrategy(string id = default(string), int percentage = default(int), List<string> percentageAttributes = default(List<string>), Object value = default(Object), List<FeatureRolloutStrategyAttribute> attributes = default(List<FeatureRolloutStrategyAttribute>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for FeatureRolloutStrategy and cannot be null");
            }
            this.Id = id;
            this.Percentage = percentage;
            this.PercentageAttributes = percentageAttributes;
            this.Value = value;
            this.Attributes = attributes;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// value between 0 and 1000000 - for four decimal places
        /// </summary>
        /// <value>value between 0 and 1000000 - for four decimal places</value>
        [DataMember(Name = "percentage", EmitDefaultValue = false)]
        public int Percentage { get; set; }

        /// <summary>
        /// if you don&#39;t wish to apply percentage based on user id, you can use one or more attributes defined here
        /// </summary>
        /// <value>if you don&#39;t wish to apply percentage based on user id, you can use one or more attributes defined here</value>
        [DataMember(Name = "percentageAttributes", EmitDefaultValue = false)]
        public List<string> PercentageAttributes { get; set; }

        /// <summary>
        /// when we attach the RolloutStrategy for Dacha or SSE this lets us push the value out. Only visible in SDK and SSE Edge.
        /// </summary>
        /// <value>when we attach the RolloutStrategy for Dacha or SSE this lets us push the value out. Only visible in SDK and SSE Edge.</value>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public Object Value { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public List<FeatureRolloutStrategyAttribute> Attributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeatureRolloutStrategy {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  PercentageAttributes: ").Append(PercentageAttributes).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeatureRolloutStrategy);
        }

        /// <summary>
        /// Returns true if FeatureRolloutStrategy instances are equal
        /// </summary>
        /// <param name="input">Instance of FeatureRolloutStrategy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureRolloutStrategy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Percentage == input.Percentage ||
                    this.Percentage.Equals(input.Percentage)
                ) && 
                (
                    this.PercentageAttributes == input.PercentageAttributes ||
                    this.PercentageAttributes != null &&
                    input.PercentageAttributes != null &&
                    this.PercentageAttributes.SequenceEqual(input.PercentageAttributes)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Percentage.GetHashCode();
                if (this.PercentageAttributes != null)
                {
                    hashCode = (hashCode * 59) + this.PercentageAttributes.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
